// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output = "../src/lib/schemas/generated/"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum CampaignType {
  Personal
  NGO
  Education
  Others
}

model User{
  id String @id @default(uuid())
  email String @unique
  name String?
  role Role @default(USER)
  stripeUser StripeUser?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  campaigns Campaign[]
  @@map("users")
}

model Campaign{
  id String @id @default(uuid())
  userName String @default("Anonymous")
  userId String
  user User @relation(fields: [userId], references: [id])
  title String
  story String
  target Float
  type CampaignType
  othersType String?
  image String
  endDate DateTime
  amountCollected Float @default(0)
  donations Donation[]
  withdrawalRequests WithdrawalRequest[]
  @@map("campaigns")
}

model Donation{
  id String @id @default(uuid())
  userId String
  user StripeUser @relation(fields: [userId], references: [id])
  campaignId String
  campaign Campaign @relation(fields: [campaignId], references: [id])
  amount Float
  anonymous Boolean @default(false)
  @@map("donations")
}

model StripeUser{
  id String @id @default(uuid())
  email String @unique
  name String?
  phone String?
  donations Donation[]
  userId String?@unique
  user User?@relation(fields: [userId], references: [id])
  @@map("stripe_users")
}

model WithdrawalRequest{
  id String @id @default(uuid())
  campaignId String
  campaign Campaign @relation(fields: [campaignId], references: [id])
  amount Float
  createdAt DateTime @default(now())
  transitNumber Int
  institutionNumber Int
  accountNumber Int
  approved Boolean @default(false)
  @@map("withdrawal_requests")
}